timezone: Europe/Moscow

api:
  enabled: true

sources:
  lgp_logs:
    type: file
    include:
      - "/var/log/**/1Cv8Log/*.lgp"
    fingerprint:
      strategy: device_and_inode
    multiline:
      start_pattern: "^\\{\\d{14},\\w,"
      condition_pattern: "^\\{\\d{14},\\w,"
      mode: halt_before
      timeout_ms: 1000
      
  lgf_logs:
    type: file
    fingerprint:
      strategy: device_and_inode
    include:
      - "/var/log/**/1Cv8Log/*.lgf"
      
  ibases_logs:
    type: file
    fingerprint:
      strategy: checksum
      lines: 2
    include:
      - "/var/log/**/ibases*.v8i"
    multiline:
      start_pattern: ""
      condition_pattern: "NEVERFOUNDLINE"
      mode: halt_before
      timeout_ms: 1000      


transforms:
  parse_lgp:
    type: remap
    inputs: [ lgp_logs ]
    source: |-
      .FilePath = to_string(.file) ?? "unknown"
      .FileName = replace(.FilePath, r'.*[\\/]([^\\/]+)$', "$$1")
      parsed, err = parse_regex(.message, r'\{(?P<DateTimeRaw>\d{14}),(?P<TransactionStatus>\w),\s*\{(?P<TransactionDate>[^\}]+)\},(?P<User>\d+),(?P<Computer>\d+),(?P<Application>\d+),(?P<Connection>\d+),(?P<Event>\d+),(?P<Severity>\w),"(?P<Comment>[\s\S]*?)",(?P<Metadata>\d+),\s*(?P<Data>[\s\S]+?\}),"(?P<DataPresentation>.*?)",(?P<Server>\d+),(?P<MainPort>\d+),(?P<AddPort>\d+),(?P<Session>\d+)', numeric_groups: false)
      if err != null {
        abort
      }
      . = merge(., parsed)
      .name = "LGP"
      ts_format = "%Y-%m-%dT%H:%M:%S"
      .DateTime =format_timestamp!(parse_timestamp!(.DateTimeRaw, "%Y%m%d%H%M%S"), ts_format, timezone:"UTC")
      . = merge(., parse_regex!(.FilePath, r'(?P<db_uid>\w{8}\-\w{4}-\w{4}-\w{4}-\w{12})'))
      del(.message)
      ts_map = {
        "N": "Нет транзакции",
        "U": "Зафиксирована",
        "R": "Не завершена",
        "C": "Отменена",
      }
      sev_map = {
        "I": "Информация",
        "E": "Ошибка",
        "W": "Предупреждение",
        "N": "Примечание",
      }
      .TransactionStatus = get(ts_map, [.TransactionStatus]) ?? .TransactionStatus
      .Severity          = get(sev_map, [.Severity]) ?? .Severity
      data_first_value = replace(.Data, r'[\s\S]*\{"\w","?([^\}]+)"?\}[\s\S]*', "$$1") ?? .Data
      if data_first_value != .Data {
        .Data = data_first_value
        } else {
        .Data = ""
        }
      startEpoch = -62135632799
      parts         = split!(.TransactionDate, ",")
      hexDate       = parts[0]
      hexNumber     = parts[1]
      if hexDate != "0" && hexDate != "" {
        parsed        = parse_int!(hexDate, base: 16)
        base_ts       = ceil(startEpoch + parsed / 10000)
        corrected_ts  = base_ts + (7 * 3600)
        #ns            = corrected_ts * 1000000000
        .TransactionDate   = format_timestamp!(parse_timestamp!(to_string(corrected_ts),
                                "%s",),  "%Y-%m-%d %H:%M:%S",
                                timezone: "UTC")
        .TransactionNumber = parse_int!(hexNumber, base: 16)
      } else {
        .TransactionDate   = null
      }

      
      

  parse_lgf:
    type: remap
    inputs: [ lgf_logs ]
    source: |-
        rec = {}
        .message = to_string(.message)  ?? ""
        err1 =""; err2=""; err3=""
        if starts_with(.message, "{5,") || starts_with(.message, "{1,") {
          rec, err1 = parse_regex(.message, r'^\{(?P<typeId>[1-8]),(?P<uuid>[^,]+),"(?P<value>[^,]+)",(?P<id>\d+)\},?')
        } else if starts_with(.message, "{7,") || starts_with(.message, "{8,") {
         rec, err2 = parse_regex(.message, r'^\{(?P<typeId>[1-8]),(?P<value>\d+),(?P<id>\d+)\},?')
        }else {
         rec, err3 = parse_regex(.message, r'^\{(?P<typeId>[1-8]),"?(?P<value>[^,"]+)"?,(?P<id>\d+)\},?')
        }
        if rec != {} && (err1 ==null || err2 ==null || err3 ==null) {
         rec = merge(rec, parse_regex!(.file, r'(?P<db_uid>\w{8}\-\w{4}-\w{4}-\w{4}-\w{12})'))
         . = rec
         .name = "LGF"
        } else { abort }
        
        applications_map = {
        "1CV8": "Толстый клиент",
        "1CV8C": "Тонкий клиент",
        "WebClient": "Веб-клиент",
        "Designer": "Конфигуратор",
        "COMConnection": "Внешнее соединение (COM, обычное)",
        "WSConnection": "Сессия web-сервиса",
        "BackgroundJob": "Фоновое задание",
        "SystemBackgroundJob": "Системное фоновое задание",
        "SrvrConsole": "Консоль кластера",
        "COMConsole": "Внешнее соединение (COM, административное)",
        "JobScheduler": "Планировщик заданий",
        "Debugger": "Отладчик",
        "RAS": "Сервер администрирования",
        "HTTPServiceConnection": "Соединение с HTTP-сервисом",
        "ODataConnection": "Соединение с автоматическим REST API"
        }
          
        events_map = {
        "_$$Access$$_.Access": "Доступ.Доступ",
        "_$$Access$$_.AccessDenied": "Доступ.Отказ в доступе",
        "_$$Data$$_.Delete": "Данные.Удаление",
        "_$$Data$$_.DeletePredefinedData": "Данные.Удаление предопределенных данных",
        "_$$Data$$_.DeleteVersions": "Данные.Удаление версий",
        "_$$Data$$_.New": "Данные.Добавление",
        "_$$Data$$_.NewPredefinedData": "Данные.Добавление предопределенных данных",
        "_$$Data$$_.NewVersion": "Данные.Добавление версии",
        "_$$Data$$_.Pos": "Данные.Проведение",
        "_$$Data$$_.PredefinedDataInitialization": "Данные.Инициализация предопределенных данных",
        "_$$Data$$_.PredefinedDataInitializationDataNotFound": "Данные.Инициализация предопределенных данных.Данные не найдены",
        "_$$Data$$_.SetPredefinedDataInitialization": "Данные.Установка инициализации предопределенных данных",
        "_$$Data$$_.SetStandardODataInterfaceContent": "Данные.Изменение состава стандартного интерфейса OData",
        "_$$Data$$_.TotalsMaxPeriodUpdate": "Данные.Изменение максимального периода рассчитанных итогов",
        "_$$Data$$_.TotalsMinPeriodUpdate": "Данные.Изменение минимального периода рассчитанных итогов",
        "_$$Data$$_.Post": "Данные.Проведение",
        "_$$Data$$_.Unpost": "Данные.Отмена проведения",
        "_$$Data$$_.Update": "Данные.Изменение",
        "_$$Data$$_.UpdatePredefinedData": "Данные.Изменение предопределенных данных",
        "_$$Data$$_.VersionCommentUpdate": "Данные.Изменение комментария версии",
        "_$$InfoBase$$_.ConfigExtensionUpdate": "Информационная база.Изменение расширения конфигурации",
        "_$$InfoBase$$_.ConfigUpdate": "Информационная база.Изменение конфигурации",
        "_$$InfoBase$$_.DBConfigBackgroundUpdateCancel": "Информационная база.Отмена фонового обновления",
        "_$$InfoBase$$_.DBConfigBackgroundUpdateFinish": "Информационная база.Завершение фонового обновления",
        "_$$InfoBase$$_.DBConfigBackgroundUpdateResume": "Информационная база.Продолжение (после приостановки) процесса фонового обновления",
        "_$$InfoBase$$_.DBConfigBackgroundUpdateStart": "Информационная база.Запуск фонового обновления",
        "_$$InfoBase$$_.DBConfigBackgroundUpdateSuspend": "Информационная база.Приостановка (пауза) процесса фонового обновления",
        "_$$InfoBase$$_.DBConfigExtensionUpdate": "Информационная база.Изменение расширения конфигурации",
        "_$$InfoBase$$_.DBConfigExtensionUpdateError": "Информационная база.Ошибка изменения расширения конфигурации",
        "_$$InfoBase$$_.DBConfigUpdate": "Информационная база.Изменение конфигурации базы данных",
        "_$$InfoBase$$_.DBConfigUpdateStart": "Информационная база.Запуск обновления конфигурации базы данных",
        "_$$InfoBase$$_.DumpError": "Информационная база.Ошибка выгрузки в файл",
        "_$$InfoBase$$_.DumpFinish": "Информационная база.Окончание выгрузки в файл",
        "_$$InfoBase$$_.DumpStart": "Информационная база.Начало выгрузки в файл",
        "_$$InfoBase$$_.EraseData": "Информационная база.Удаление данных информационной базы",
        "_$$InfoBase$$_.EventLogReduce": "Информационная база.Сокращение журнала регистрации",
        "_$$InfoBase$$_.EventLogReduceError": "Информационная база.Ошибка сокращения журнала регистрации",
        "_$$InfoBase$$_.EventLogSettingsUpdate": "Информационная база.Изменение параметров журнала регистрации",
        "_$$InfoBase$$_.EventLogSettingsUpdateError": "Информационная база.Ошибка при изменение настроек журнала регистрации",
        "_$$InfoBase$$_.InfoBaseAdmParamsUpdate": "Информационная база.Изменение параметров информационной базы",
        "_$$InfoBase$$_.InfoBaseAdmParamsUpdateError": "Информационная база.Ошибка изменения параметров информационной базы",
        "_$$InfoBase$$_.IntegrationServiceActiveUpdate": "Информационная база.Изменение активности сервиса интеграции",
        "_$$InfoBase$$_.IntegrationServiceSettingsUpdate": "Информационная база.Изменение настроек сервиса интеграции",
        "_$$InfoBase$$_.MasterNodeUpdate": "Информационная база.Изменение главного узла",
        "_$$InfoBase$$_.PredefinedDataUpdate": "Информационная база.Обновление предопределенных данных",
        "_$$InfoBase$$_.RegionalSettingsUpdate": "Информационная база.Изменение региональных установок",
        "_$$InfoBase$$_.RestoreError": "Информационная база.Ошибка загрузки из файла",
        "_$$InfoBase$$_.RestoreFinish": "Информационная база.Окончание загрузки из файла",
        "_$$InfoBase$$_.RestoreStart": "Информационная база.Начало загрузки из файла",
        "_$$InfoBase$$_.SecondFactorAuthTemplateDelete": "Информационная база.Удаление шаблона вторго фактора аутентификации",
        "_$$InfoBase$$_.SecondFactorAuthTemplateNew": "Информационная база.Добавление шаблона вторго фактора аутентификации",
        "_$$InfoBase$$_.SecondFactorAuthTemplateUpdate": "Информационная база.Изменение шаблона вторго фактора аутентификации",
        "_$$InfoBase$$_.SetPredefinedDataUpdate": "Информационная база.Установить обновление предопределенных данных",
         "_$$InfoBase$$_.TARImportant": "Тестирование и исправление.Ошибка",
        "_$$InfoBase$$_.TARInfo": "Тестирование и исправление.Сообщение",
        "_$$InfoBase$$_.TARMess": "Тестирование и исправление.Предупреждение",
        "_$$Job$$_.Cancel": "Фоновое задание.Отмена",
        "_$$Job$$_.Error": "Фоновое задание.Ошибка выполнения",
        "_$$Job$$_.Fail": "Фоновое задание.Ошибка",
        "_$$Job$$_.Finish": "Фоновое задание.Успешное завершение",
        "_$$Job$$_.Start": "Фоновое задание.Запуск",
        "_$$Job$$_.Succeed": "Фоновое задание.Успешное завершение",
        "_$$OpenIDProvider$$_.NegativeAssertion": "Провайдер OpenID.Отклонено",
        "_$$OpenIDProvider$$_.PositiveAssertion": "Провайдер OpenID.Подтверждено",
        "_$$PerformError$": "Ошибка выполнения",
        "_$$Session$$_.Authentication": "Сеанс.Аутентификация",
        "_$$Session$$_.AuthenticationError": "Сеанс.Ошибка аутентификации",
        "_$$Session$$_.AuthenticationFirstFactor": "Сеанс.Аутентификация первый фактор",
        "_$$Session$$_.ConfigExtensionApplyError": "Сеанс.Ошибка применения расширения конфигурации",
        "_$$Session$$_.Finish": "Сеанс.Завершение",
        "_$$Session$$_.Start": "Сеанс.Начало",
        "_$$Transaction$$_.Begin": "Транзакция.Начало",
        "_$$Transaction$$_.Commit": "Транзакция.Фиксация",
        "_$$Transaction$$_.Rollback": "Транзакция.Отмена",
        "_$$User$$_.AuthenticationLock": "Пользователи.Блокировка аутентификации",
        "_$$User$$_.AuthenticationUnlock": "Пользователи.Разблокировка аутентификации",
        "_$$User$$_.AuthenticationUnlockError": "Пользователи.Ошибка разблокировки аутентификации",
        "_$$User$$_.Delete": "Пользователи.Удаление",
        "_$$User$$_.DeleteError": "Пользователи.Ошибка удаления",
        "_$$User$$_.New": "Пользователи.Добавление",
        "_$$User$$_.NewError": "Пользователи.Ошибка добавления",
        "_$$User$$_.Update": "Пользователи.Изменение",
        "_$$User$$_.UpdateError": "Пользователи.Ошибка изменения"
        }
      
        if .typeId == "4" { 
            translated = get(events_map, [ .value ]) ?? ""
            if translated != null {
              .value = translated
            }
        }
        if .typeId == "3" { 
            translated = get(applications_map, [ .value ]) ?? ""
            if translated != null {
              .value = translated
            }
        }

  parse_ibase:
    type: remap
    inputs: [ ibases_logs ]
    source: |-
      .name = "IBASE"
      .message = to_string(.message)  ?? ""
      .events = []
      counter = 0
      event  = {}
      
      for_each(array(split(.message, "\n"))) -> |_index, value| {
        
        # перед [ иногда может быть мусор
        if contains(value, "[") {
        i = find(value, "[")
        value = slice!(value, i)
      }
      
        value = replace(value, r'^\s*(.*?)\s*$', "$$1")
        if starts_with(value, "[") {
          if exists(event.ID) {
           event.name = .name
            .events = push(.events, event)
          }
          counter = 0
          event = {}
          event.title = replace(value, r'^\S(.*)\S$', "$$1")
        } else {
          counter = counter + 1
          if starts_with(value, "Connect=") { 
            value = replace(value, "Connect=", "")
            value = replace(value, r'^(.*?)[;\s]*$', "$$1")
            event = merge(event, parse_key_value!(value, "=", ";"))
          } else if starts_with(value, "ID=") {
           event.ID = replace(value, "ID=", "")
          }   
        }
      }
            if exists(event.ID) {
              event.name = .name
              .events = push(.events, event)
          }
      . = .events

      
sinks:

    
  lgf:
    type: file
    inputs: [ "parse_*" ]
    encoding:
       codec: json
    path: /tmp/{{ .name }}.log
    
    
  clickhouse:
    type: clickhouse
    inputs: [ "parse_*" ]
    endpoint: ${CLICKHOUSE_SERVER}
    auth:
      strategy: basic
      user: ${CLICKHOUSE_USER}
      password: ${CLICKHOUSE_PASSWORD}
    database: ${CLICKHOUSE_DATABASE}
    skip_unknown_fields: true
    table: "{{ .name }}"
    batch:
      max_events: 10000
      timeout_secs: 3
    acknowledgements:
      enabled: true


